# This contains a bunch of small fixes that allow the challenges to be compiled

# Format:
# [filename]:
#   '[code to be replaced]': '[replacement]'
#   ...
#
#   # Everything inside the 're' key is treated a regex substitution
#   re:
#     '[regex match]': '[replace]'
#     ...

# Patches that should be applied to all files
all:
  'random(': 'cgc_random('
  'fdwait(': 'cgc_fdwait('
  'timeval': 'cgc_timeval'
  'fd_set': 'cgc_fd_set'
  'ssize_t': 'cgc_ssize_t'

  # Delete this include anywhere
  '#include <new.h>': ''

  re:
    '([^s])size_t': '\1cgc_size_t'

    # Get rid of fastcall on main
    '__attribute__\(\(fastcall\)\)\s+main': 'main'

    # Fix for main that expects the flag page addr as the first argument
    'main\s*\(\s*int\s+([^\,]+)\,([^\)]+)\s*\)\s*\{': |
        main(int \1, \2) {
            \1 = CGC_FLAG_PAGE_ADDRESS;


# Some fixes for challenges that used C++
# KPRCA 53, 54, TNETS 2
main.cc:
  'call_inits();': ''
  'call_ctors();': ''
  'void terminate(int) __attribute__((__noreturn__));': 'void terminate(int e) {_terminate(e);}'

# A few files had a section() attribute, but were missing "DATA,", which is needed on OSX
# KPRCA 25
# TODO: Windows?
aafirst.c: &rodatafix
  'section(".rodata.init")': 'section("DATA,.rodata.init")'

oo.h:
  <<: *rodatafix

zzlast.c:
  <<: *rodatafix


# Fix for KPRCA 44
# This one was kind of a mess
tornado.c:
  '#define _mm_slli_si128 __builtin_ia32_pslldqi128': |
    inline _m128i _mm_slli_si128(_m128i a, uint8_t b) {
        __asm__ volatile ( "pslldq %1, %0" : "+x" (a) : "i" (b) );
        return a;
    }

  '#define _mm_srli_si128 __builtin_ia32_psrldqi128': |
    inline _m128i _mm_srli_si128(_m128i a, uint8_t b) {
        __asm__ volatile ( "psrldq %1, %0" : "+x" (a) : "i" (b) );
        return a;
    }

  '#define _mm_slli_epi32 __builtin_ia32_pslldi128': |
    inline _m128i _mm_slli_epi32(_m128i a, uint8_t b) {
        __asm__ volatile ( "pslld %1, %0" : "+x" (a) : "i" (b) );
        return a;
    }

  '#define _mm_srli_epi32 __builtin_ia32_psrldi128': |
    inline _m128i _mm_srli_epi32(_m128i a, uint8_t b) {
        __asm__ volatile ( "psrld %1, %0" : "+x" (a) : "i" (b) );
        return a;
    }

# Minor rename in vFilter
# TODO: use a regex for this kind of stuff in 'all'
vm.c:
  'syscall_random,': 'syscall_cgc_random,'

# Azurad fixes
parser.cc: &azurad
  re:
    'std::(cgc_)?size_t': 'STD_SIZE_T'

parser.h:
  <<: *azurad

vector.h:
  'new (start++) T();': |
    T *tmp = new T();
    cgc_memcpy(start++, tmp, sizeof(T));
    delete tmp;

# CML fix
string.cc:
  'String *s = new(mem) String(str);': |
    String *s = new String(str);
    cgc_memcpy(mem, s, sizeof(String));
    delete s;
    s = (String *) mem;

# FailAV fix
database.cc:
  'rnode->d_next[idx] = new (malloc(get_alloc_size(0))) PrefixNode(len == 1, word[0], 0);': |
    rnode->d_next[idx] = (PrefixNode *) malloc(get_alloc_size(0));
    PrefixNode *tmp = new PrefixNode(len == 1, word[0], 0);
    cgc_memcpy(rnode->d_next[idx], tmp, get_alloc_size(0));
    delete tmp;
